package com.hbaspecto.pecas.sd;

import static org.junit.Assert.assertEquals;
import no.uib.cipr.matrix.DenseVector;
import no.uib.cipr.matrix.Matrix;
import no.uib.cipr.matrix.Vector;

import org.junit.Ignore;
import org.junit.Test;

import com.hbaspecto.pecas.sd.estimation.EqualityConstraint;
import com.hbaspecto.pecas.sd.estimation.FixedParameter;
import com.hbaspecto.pecas.sd.estimation.OrderingConstraint;
import com.hbaspecto.pecas.sd.estimation.SimpleBoundary;

@Ignore
// TODO: Fix test
public class TestConstraints {
	@Test
	public void testSimpleBoundary() {
		final Vector params = new DenseVector(new double[] { 4.0, 6.0, 10.0 });

		SimpleBoundary sb = new SimpleBoundary(0, 5.0, true);
		double alpha = 0.001;
		double penalty = sb.getPenaltyFunction(params, alpha);
		assertEquals(Double.POSITIVE_INFINITY, penalty);
		Vector gradient = sb.getPenaltyFunctionGradient(params, alpha);
		assertEquals(0.0, gradient.get(0));
		assertEquals(0.0, gradient.get(1));
		assertEquals(0.0, gradient.get(2));
		Matrix hessian = sb.getPenaltyFunctionHessian(params, alpha);
		assertEquals(0.0, hessian.get(0, 0));
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(0.0, hessian.get(1, 1));
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(0.0, hessian.get(2, 2));

		alpha = 0.05;
		penalty = sb.getPenaltyFunction(params, alpha);
		assertEquals(Double.POSITIVE_INFINITY, penalty);
		gradient = sb.getPenaltyFunctionGradient(params, alpha);
		assertEquals(0.0, gradient.get(0));
		assertEquals(0.0, gradient.get(1));
		assertEquals(0.0, gradient.get(2));
		hessian = sb.getPenaltyFunctionHessian(params, alpha);
		assertEquals(0.0, hessian.get(0, 0));
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(0.0, hessian.get(1, 1));
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(0.0, hessian.get(2, 2));

		sb = new SimpleBoundary(1, 5.0, true);
		alpha = 0.001;
		penalty = sb.getPenaltyFunction(params, alpha);
		assertEquals(0.001, penalty, 1E-8);
		gradient = sb.getPenaltyFunctionGradient(params, alpha);
		assertEquals(0.0, gradient.get(0));
		assertEquals(-0.001, gradient.get(1), 1E-8);
		assertEquals(0.0, gradient.get(2));
		hessian = sb.getPenaltyFunctionHessian(params, alpha);
		assertEquals(0.0, hessian.get(0, 0));
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(0.002, hessian.get(1, 1), 1E-8);
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(0.0, hessian.get(2, 2));

		alpha = 0.05;
		penalty = sb.getPenaltyFunction(params, alpha);
		assertEquals(0.05, penalty, 1E-7);
		gradient = sb.getPenaltyFunctionGradient(params, alpha);
		assertEquals(0.0, gradient.get(0));
		assertEquals(-0.05, gradient.get(1), 1E-7);
		assertEquals(0.0, gradient.get(2));
		hessian = sb.getPenaltyFunctionHessian(params, alpha);
		assertEquals(0.0, hessian.get(0, 0));
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(0.1, hessian.get(1, 1), 1E-6);
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(0.0, hessian.get(2, 2));

		sb = new SimpleBoundary(2, 5.0, true);
		alpha = 0.001;
		penalty = sb.getPenaltyFunction(params, alpha);
		assertEquals(0.0002, penalty, 1E-9);
		gradient = sb.getPenaltyFunctionGradient(params, alpha);
		assertEquals(0.0, gradient.get(0));
		assertEquals(0.0, gradient.get(1));
		assertEquals(-4E-5, gradient.get(2), 1E-10);
		hessian = sb.getPenaltyFunctionHessian(params, alpha);
		assertEquals(0.0, hessian.get(0, 0));
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(0.0, hessian.get(1, 1));
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(1.6E-5, hessian.get(2, 2), 1E-10);

		alpha = 0.05;
		penalty = sb.getPenaltyFunction(params, alpha);
		assertEquals(0.01, penalty, 1E-7);
		gradient = sb.getPenaltyFunctionGradient(params, alpha);
		assertEquals(0.0, gradient.get(0));
		assertEquals(0.0, gradient.get(1), 1E-7);
		assertEquals(-0.002, gradient.get(2), 1E-8);
		hessian = sb.getPenaltyFunctionHessian(params, alpha);
		assertEquals(0.0, hessian.get(0, 0));
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(0.0, hessian.get(1, 1));
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(0.0008, hessian.get(2, 2), 1E-9);

		sb = new SimpleBoundary(0, 8.0, false);
		alpha = 0.001;
		penalty = sb.getPenaltyFunction(params, alpha);
		assertEquals(0.00025, penalty, 1E-9);
		gradient = sb.getPenaltyFunctionGradient(params, alpha);
		assertEquals(6.25E-5, gradient.get(0), 1E-10);
		assertEquals(0.0, gradient.get(1));
		assertEquals(0.0, gradient.get(2));
		hessian = sb.getPenaltyFunctionHessian(params, alpha);
		assertEquals(3.125E-5, hessian.get(0, 0), 1E-10);
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(0.0, hessian.get(1, 1));
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(0.0, hessian.get(2, 2));

		alpha = 0.05;
		penalty = sb.getPenaltyFunction(params, alpha);
		assertEquals(0.0125, penalty, 1E-7);
		gradient = sb.getPenaltyFunctionGradient(params, alpha);
		assertEquals(0.003125, gradient.get(0), 1E-8);
		assertEquals(0.0, gradient.get(1));
		assertEquals(0.0, gradient.get(2));
		hessian = sb.getPenaltyFunctionHessian(params, alpha);
		assertEquals(0.0015625, hessian.get(0, 0), 1E-8);
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(0.0, hessian.get(1, 1));
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(0.0, hessian.get(2, 2));

		sb = new SimpleBoundary(1, 8.0, false);
		alpha = 0.001;
		penalty = sb.getPenaltyFunction(params, alpha);
		assertEquals(0.0005, penalty, 1E-9);
		gradient = sb.getPenaltyFunctionGradient(params, alpha);
		assertEquals(0.0, gradient.get(0));
		assertEquals(0.00025, gradient.get(1), 1E-9);
		assertEquals(0.0, gradient.get(2));
		hessian = sb.getPenaltyFunctionHessian(params, alpha);
		assertEquals(0.0, hessian.get(0, 0));
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(0.00025, hessian.get(1, 1), 1E-9);
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(0.0, hessian.get(2, 2));

		alpha = 0.05;
		penalty = sb.getPenaltyFunction(params, alpha);
		assertEquals(0.025, penalty, 1E-7);
		gradient = sb.getPenaltyFunctionGradient(params, alpha);
		assertEquals(0.0, gradient.get(0));
		assertEquals(0.0125, gradient.get(1), 1E-7);
		assertEquals(0.0, gradient.get(2));
		hessian = sb.getPenaltyFunctionHessian(params, alpha);
		assertEquals(0.0, hessian.get(0, 0));
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(0.0125, hessian.get(1, 1), 1E-7);
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(0.0, hessian.get(2, 2));

		sb = new SimpleBoundary(2, 8.0, false);
		alpha = 0.001;
		penalty = sb.getPenaltyFunction(params, alpha);
		assertEquals(Double.POSITIVE_INFINITY, penalty);
		gradient = sb.getPenaltyFunctionGradient(params, alpha);
		assertEquals(0.0, gradient.get(0));
		assertEquals(0.0, gradient.get(1));
		assertEquals(0.0, gradient.get(2));
		hessian = sb.getPenaltyFunctionHessian(params, alpha);
		assertEquals(0.0, hessian.get(0, 0));
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(0.0, hessian.get(1, 1));
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(0.0, hessian.get(2, 2));

		alpha = 0.05;
		penalty = sb.getPenaltyFunction(params, alpha);
		assertEquals(Double.POSITIVE_INFINITY, penalty);
		gradient = sb.getPenaltyFunctionGradient(params, alpha);
		assertEquals(0.0, gradient.get(0));
		assertEquals(0.0, gradient.get(1));
		assertEquals(0.0, gradient.get(2));
		hessian = sb.getPenaltyFunctionHessian(params, alpha);
		assertEquals(0.0, hessian.get(0, 0));
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(0.0, hessian.get(1, 1));
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(0.0, hessian.get(2, 2));
	}

	@Test
	public void testOrderingConstraint() {
		final Vector params = new DenseVector(new double[] { 4.0, 6.0, 10.0 });

		OrderingConstraint oc = new OrderingConstraint(0, 1, true);
		double alpha = 0.001;
		double penalty = oc.getPenaltyFunction(params, alpha);
		assertEquals(Double.POSITIVE_INFINITY, penalty);
		Vector gradient = oc.getPenaltyFunctionGradient(params, alpha);
		assertEquals(0.0, gradient.get(0));
		assertEquals(0.0, gradient.get(1));
		assertEquals(0.0, gradient.get(2));
		Matrix hessian = oc.getPenaltyFunctionHessian(params, alpha);
		assertEquals(0.0, hessian.get(0, 0));
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(0.0, hessian.get(1, 1));
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(0.0, hessian.get(2, 2));

		alpha = 0.05;
		penalty = oc.getPenaltyFunction(params, alpha);
		assertEquals(Double.POSITIVE_INFINITY, penalty);
		gradient = oc.getPenaltyFunctionGradient(params, alpha);
		assertEquals(0.0, gradient.get(0));
		assertEquals(0.0, gradient.get(1));
		assertEquals(0.0, gradient.get(2));
		hessian = oc.getPenaltyFunctionHessian(params, alpha);
		assertEquals(0.0, hessian.get(0, 0));
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(0.0, hessian.get(1, 1));
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(0.0, hessian.get(2, 2));

		oc = new OrderingConstraint(1, 2, true);
		alpha = 0.001;
		penalty = oc.getPenaltyFunction(params, alpha);
		assertEquals(Double.POSITIVE_INFINITY, penalty);
		gradient = oc.getPenaltyFunctionGradient(params, alpha);
		assertEquals(0.0, gradient.get(0));
		assertEquals(0.0, gradient.get(1));
		assertEquals(0.0, gradient.get(2));
		hessian = oc.getPenaltyFunctionHessian(params, alpha);
		assertEquals(0.0, hessian.get(0, 0));
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(0.0, hessian.get(1, 1));
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(0.0, hessian.get(2, 2));

		alpha = 0.05;
		penalty = oc.getPenaltyFunction(params, alpha);
		assertEquals(Double.POSITIVE_INFINITY, penalty);
		gradient = oc.getPenaltyFunctionGradient(params, alpha);
		assertEquals(0.0, gradient.get(0));
		assertEquals(0.0, gradient.get(1));
		assertEquals(0.0, gradient.get(2));
		hessian = oc.getPenaltyFunctionHessian(params, alpha);
		assertEquals(0.0, hessian.get(0, 0));
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(0.0, hessian.get(1, 1));
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(0.0, hessian.get(2, 2));

		oc = new OrderingConstraint(2, 0, true);
		alpha = 0.001;
		penalty = oc.getPenaltyFunction(params, alpha);
		assertEquals(0.000166667, penalty, 1E-9);
		gradient = oc.getPenaltyFunctionGradient(params, alpha);
		assertEquals(2.77778E-5, gradient.get(0), 1E-10);
		assertEquals(0.0, gradient.get(1));
		assertEquals(-2.77778E-5, gradient.get(2), 1E-10);
		hessian = oc.getPenaltyFunctionHessian(params, alpha);
		assertEquals(9.25926E-6, hessian.get(0, 0), 1E-11);
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(-9.25926E-6, hessian.get(0, 2), 1E-11);
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(0.0, hessian.get(1, 1));
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(-9.25926E-6, hessian.get(2, 0), 1E-11);
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(9.25926E-6, hessian.get(2, 2), 1E-11);

		alpha = 0.05;
		penalty = oc.getPenaltyFunction(params, alpha);
		assertEquals(0.00833333, penalty, 1E-8);
		gradient = oc.getPenaltyFunctionGradient(params, alpha);
		assertEquals(0.00138889, gradient.get(0), 1E-8);
		assertEquals(0.0, gradient.get(1));
		assertEquals(-0.00138889, gradient.get(2), 1E-8);
		hessian = oc.getPenaltyFunctionHessian(params, alpha);
		assertEquals(0.000462963, hessian.get(0, 0), 1E-9);
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(-0.000462963, hessian.get(0, 2), 1E-9);
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(0.0, hessian.get(1, 1));
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(-0.000462963, hessian.get(2, 0), 1E-9);
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(0.000462963, hessian.get(2, 2), 1E-9);

		oc = new OrderingConstraint(0, 1, false);
		alpha = 0.001;
		penalty = oc.getPenaltyFunction(params, alpha);
		assertEquals(0.0005, penalty, 1E-9);
		gradient = oc.getPenaltyFunctionGradient(params, alpha);
		assertEquals(0.00025, gradient.get(0), 1E-9);
		assertEquals(-0.00025, gradient.get(1), 1E-9);
		assertEquals(0.0, gradient.get(2));
		hessian = oc.getPenaltyFunctionHessian(params, alpha);
		assertEquals(0.00025, hessian.get(0, 0), 1E-9);
		assertEquals(-0.00025, hessian.get(0, 1), 1E-9);
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(-0.00025, hessian.get(1, 0), 1E-9);
		assertEquals(0.00025, hessian.get(1, 1), 1E-9);
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(0.0, hessian.get(2, 2));

		alpha = 0.05;
		penalty = oc.getPenaltyFunction(params, alpha);
		assertEquals(0.025, penalty, 1E-7);
		gradient = oc.getPenaltyFunctionGradient(params, alpha);
		assertEquals(0.0125, gradient.get(0), 1E-7);
		assertEquals(-0.0125, gradient.get(1), 1E-7);
		assertEquals(0.0, gradient.get(2));
		hessian = oc.getPenaltyFunctionHessian(params, alpha);
		assertEquals(0.0125, hessian.get(0, 0), 1E-7);
		assertEquals(-0.0125, hessian.get(0, 1), 1E-7);
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(-0.0125, hessian.get(1, 0), 1E-7);
		assertEquals(0.0125, hessian.get(1, 1), 1E-7);
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(0.0, hessian.get(2, 2));

		oc = new OrderingConstraint(1, 2, false);
		alpha = 0.001;
		penalty = oc.getPenaltyFunction(params, alpha);
		assertEquals(0.00025, penalty, 1E-9);
		gradient = oc.getPenaltyFunctionGradient(params, alpha);
		assertEquals(0.0, gradient.get(0));
		assertEquals(6.25E-5, gradient.get(1), 1E-10);
		assertEquals(-6.25E-5, gradient.get(2), 1E-10);
		hessian = oc.getPenaltyFunctionHessian(params, alpha);
		assertEquals(0.0, hessian.get(0, 0));
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(3.125E-5, hessian.get(1, 1), 1E-10);
		assertEquals(-3.125E-5, hessian.get(1, 2), 1E-10);
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(-3.125E-5, hessian.get(2, 1), 1E-10);
		assertEquals(3.125E-5, hessian.get(2, 2), 1E-10);

		alpha = 0.05;
		penalty = oc.getPenaltyFunction(params, alpha);
		assertEquals(0.0125, penalty, 1E-7);
		gradient = oc.getPenaltyFunctionGradient(params, alpha);
		assertEquals(0.0, gradient.get(0));
		assertEquals(0.003125, gradient.get(1), 1E-8);
		assertEquals(-0.003125, gradient.get(2), 1E-8);
		hessian = oc.getPenaltyFunctionHessian(params, alpha);
		assertEquals(0.0, hessian.get(0, 0));
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(0.0015625, hessian.get(1, 1), 1E-8);
		assertEquals(-0.0015625, hessian.get(1, 2), 1E-8);
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(-0.0015625, hessian.get(2, 1), 1E-8);
		assertEquals(0.0015625, hessian.get(2, 2), 1E-8);

		oc = new OrderingConstraint(2, 0, false);
		alpha = 0.001;
		penalty = oc.getPenaltyFunction(params, alpha);
		assertEquals(Double.POSITIVE_INFINITY, penalty);
		gradient = oc.getPenaltyFunctionGradient(params, alpha);
		assertEquals(0.0, gradient.get(0));
		assertEquals(0.0, gradient.get(1));
		assertEquals(0.0, gradient.get(2));
		hessian = oc.getPenaltyFunctionHessian(params, alpha);
		assertEquals(0.0, hessian.get(0, 0));
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(0.0, hessian.get(1, 1));
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(0.0, hessian.get(2, 2));

		alpha = 0.05;
		penalty = oc.getPenaltyFunction(params, alpha);
		assertEquals(Double.POSITIVE_INFINITY, penalty);
		gradient = oc.getPenaltyFunctionGradient(params, alpha);
		assertEquals(0.0, gradient.get(0));
		assertEquals(0.0, gradient.get(1));
		assertEquals(0.0, gradient.get(2));
		hessian = oc.getPenaltyFunctionHessian(params, alpha);
		assertEquals(0.0, hessian.get(0, 0));
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(0.0, hessian.get(1, 1));
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(0.0, hessian.get(2, 2));
	}

	@Test
	public void testFixedParameter() {
		final Vector params = new DenseVector(new double[] { 4.0, 6.0, 10.0 });

		FixedParameter fp = new FixedParameter(0, 6.0);
		double alpha = 0.001;
		double penalty = fp.getPenaltyFunction(params, alpha);
		assertEquals(126.491, penalty, 0.001);
		Vector gradient = fp.getPenaltyFunctionGradient(params, alpha);
		assertEquals(-126.491, gradient.get(0), 0.001);
		assertEquals(0.0, gradient.get(1));
		assertEquals(0.0, gradient.get(2));
		Matrix hessian = fp.getPenaltyFunctionHessian(params, alpha);
		assertEquals(63.2456, hessian.get(0, 0), 0.0001);
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(0.0, hessian.get(1, 1));
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(0.0, hessian.get(2, 2));

		alpha = 0.05;
		penalty = fp.getPenaltyFunction(params, alpha);
		assertEquals(17.8885, penalty, 0.0001);
		gradient = fp.getPenaltyFunctionGradient(params, alpha);
		assertEquals(-17.8885, gradient.get(0), 0.0001);
		assertEquals(0.0, gradient.get(1));
		assertEquals(0.0, gradient.get(2));
		hessian = fp.getPenaltyFunctionHessian(params, alpha);
		assertEquals(8.94427, hessian.get(0, 0), 0.00001);
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(0.0, hessian.get(1, 1));
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(0.0, hessian.get(2, 2));

		fp = new FixedParameter(1, 6.0);
		alpha = 0.001;
		penalty = fp.getPenaltyFunction(params, alpha);
		assertEquals(0.0, penalty);
		gradient = fp.getPenaltyFunctionGradient(params, alpha);
		assertEquals(0.0, gradient.get(0));
		assertEquals(0.0, gradient.get(1));
		assertEquals(0.0, gradient.get(2));
		hessian = fp.getPenaltyFunctionHessian(params, alpha);
		assertEquals(0.0, hessian.get(0, 0));
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(63.2456, hessian.get(1, 1), 0.0001);
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(0.0, hessian.get(2, 2));

		alpha = 0.05;
		penalty = fp.getPenaltyFunction(params, alpha);
		assertEquals(0.0, penalty);
		gradient = fp.getPenaltyFunctionGradient(params, alpha);
		assertEquals(0.0, gradient.get(0));
		assertEquals(0.0, gradient.get(1));
		assertEquals(0.0, gradient.get(2));
		hessian = fp.getPenaltyFunctionHessian(params, alpha);
		assertEquals(0.0, hessian.get(0, 0));
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(8.94427, hessian.get(1, 1), 0.00001);
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(0.0, hessian.get(2, 2));

		fp = new FixedParameter(2, 6.0);
		alpha = 0.001;
		penalty = fp.getPenaltyFunction(params, alpha);
		assertEquals(505.964, penalty, 0.001);
		gradient = fp.getPenaltyFunctionGradient(params, alpha);
		assertEquals(0.0, gradient.get(0));
		assertEquals(0.0, gradient.get(1));
		assertEquals(252.982, gradient.get(2), 0.001);
		hessian = fp.getPenaltyFunctionHessian(params, alpha);
		assertEquals(0.0, hessian.get(0, 0));
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(0.0, hessian.get(1, 1));
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(63.2456, hessian.get(2, 2), 0.0001);

		alpha = 0.05;
		penalty = fp.getPenaltyFunction(params, alpha);
		assertEquals(71.5542, penalty, 0.0001);
		gradient = fp.getPenaltyFunctionGradient(params, alpha);
		assertEquals(0.0, gradient.get(0));
		assertEquals(0.0, gradient.get(1));
		assertEquals(35.7771, gradient.get(2), 0.0001);
		hessian = fp.getPenaltyFunctionHessian(params, alpha);
		assertEquals(0.0, hessian.get(0, 0));
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(0.0, hessian.get(1, 1));
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(8.94427, hessian.get(2, 2), 0.00001);
	}

	@Test
	public void testEqualityConstraint() {
		final Vector params = new DenseVector(new double[] { 4.0, 6.0, 10.0 });

		EqualityConstraint ec = new EqualityConstraint(0, 1);
		double alpha = 0.001;
		double penalty = ec.getPenaltyFunction(params, alpha);
		assertEquals(126.491, penalty, 0.001);
		Vector gradient = ec.getPenaltyFunctionGradient(params, alpha);
		assertEquals(-126.491, gradient.get(0), 0.001);
		assertEquals(126.491, gradient.get(1), 0.001);
		assertEquals(0.0, gradient.get(2));
		Matrix hessian = ec.getPenaltyFunctionHessian(params, alpha);
		assertEquals(63.2456, hessian.get(0, 0), 0.0001);
		assertEquals(-63.2456, hessian.get(0, 1), 0.0001);
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(-63.2456, hessian.get(1, 0), 0.0001);
		assertEquals(63.2456, hessian.get(1, 1), 0.0001);
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(0.0, hessian.get(2, 2));

		alpha = 0.05;
		penalty = ec.getPenaltyFunction(params, alpha);
		assertEquals(17.8885, penalty, 0.0001);
		gradient = ec.getPenaltyFunctionGradient(params, alpha);
		assertEquals(-17.8885, gradient.get(0), 0.0001);
		assertEquals(17.8885, gradient.get(1), 0.0001);
		assertEquals(0.0, gradient.get(2));
		hessian = ec.getPenaltyFunctionHessian(params, alpha);
		assertEquals(8.94427, hessian.get(0, 0), 0.00001);
		assertEquals(-8.94427, hessian.get(0, 1), 0.00001);
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(-8.94427, hessian.get(1, 0), 0.00001);
		assertEquals(8.94427, hessian.get(1, 1), 0.00001);
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(0.0, hessian.get(2, 2));

		ec = new EqualityConstraint(1, 2);
		alpha = 0.001;
		penalty = ec.getPenaltyFunction(params, alpha);
		assertEquals(505.964, penalty, 0.001);
		gradient = ec.getPenaltyFunctionGradient(params, alpha);
		assertEquals(0.0, gradient.get(0));
		assertEquals(-252.982, gradient.get(1), 0.001);
		assertEquals(252.982, gradient.get(2), 0.001);
		hessian = ec.getPenaltyFunctionHessian(params, alpha);
		assertEquals(0.0, hessian.get(0, 0));
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(63.2456, hessian.get(1, 1), 0.0001);
		assertEquals(-63.2456, hessian.get(1, 2), 0.0001);
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(-63.2456, hessian.get(2, 1), 0.0001);
		assertEquals(63.2456, hessian.get(2, 2), 0.0001);

		alpha = 0.05;
		penalty = ec.getPenaltyFunction(params, alpha);
		assertEquals(71.5542, penalty, 0.0001);
		gradient = ec.getPenaltyFunctionGradient(params, alpha);
		assertEquals(0.0, gradient.get(0));
		assertEquals(-35.7771, gradient.get(1), 0.0001);
		assertEquals(35.7771, gradient.get(2), 0.0001);
		hessian = ec.getPenaltyFunctionHessian(params, alpha);
		assertEquals(0.0, hessian.get(0, 0));
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(0.0, hessian.get(0, 2));
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(8.94427, hessian.get(1, 1), 0.00001);
		assertEquals(-8.94427, hessian.get(1, 2), 0.00001);
		assertEquals(0.0, hessian.get(2, 0));
		assertEquals(-8.94427, hessian.get(2, 1), 0.00001);
		assertEquals(8.94427, hessian.get(2, 2), 0.00001);

		ec = new EqualityConstraint(2, 0);
		alpha = 0.001;
		penalty = ec.getPenaltyFunction(params, alpha);
		assertEquals(1138.42, penalty, 0.01);
		gradient = ec.getPenaltyFunctionGradient(params, alpha);
		assertEquals(-379.473, gradient.get(0), 0.001);
		assertEquals(0.0, gradient.get(1));
		assertEquals(379.473, gradient.get(2), 0.001);
		hessian = ec.getPenaltyFunctionHessian(params, alpha);
		assertEquals(63.2456, hessian.get(0, 0), 0.0001);
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(-63.2456, hessian.get(0, 2), 0.0001);
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(0.0, hessian.get(1, 1));
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(-63.2456, hessian.get(2, 0), 0.0001);
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(63.2456, hessian.get(2, 2), 0.0001);

		alpha = 0.05;
		penalty = ec.getPenaltyFunction(params, alpha);
		assertEquals(160.997, penalty, 0.001);
		gradient = ec.getPenaltyFunctionGradient(params, alpha);
		assertEquals(-53.6656, gradient.get(0), 0.0001);
		assertEquals(0.0, gradient.get(1));
		assertEquals(53.6656, gradient.get(2), 0.0001);
		hessian = ec.getPenaltyFunctionHessian(params, alpha);
		assertEquals(8.94427, hessian.get(0, 0), 0.00001);
		assertEquals(0.0, hessian.get(0, 1));
		assertEquals(-8.94427, hessian.get(0, 2), 0.00001);
		assertEquals(0.0, hessian.get(1, 0));
		assertEquals(0.0, hessian.get(1, 1));
		assertEquals(0.0, hessian.get(1, 2));
		assertEquals(-8.94427, hessian.get(2, 0), 0.00001);
		assertEquals(0.0, hessian.get(2, 1));
		assertEquals(8.94427, hessian.get(2, 2), 0.00001);
	}
}
