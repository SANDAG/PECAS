/*
 *  Copyright 2005 HBA Specto Incorporated
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */
/* Generated by Together */

package com.hbaspecto.pecas.aa.activities;
import java.io.IOException;
import java.io.Writer;

import com.hbaspecto.pecas.ChoiceModelOverflowException;
import com.hbaspecto.pecas.zones.AbstractZone;


public class AmountInZone {

    public AbstractZone myTaz;
    protected ProductionActivity myProductionActivity;
    
    public double constraintQuantity =0;
    boolean constrained = false;

    private double locationSpecificUtilityInclTaxes;
    public double quantity = 0;
    private double allocationSizeTerm;

    public AmountInZone(ProductionActivity p, AbstractZone t) {
      myProductionActivity = p;
      myTaz = t;
    }

    public double getLocationSpecificUtilityInclTaxes() { 
    	if (myProductionActivity.isUsingZoneConstants()) {
    		return locationSpecificUtilityInclTaxes; 
    	}
    	else return 0;
    }

    public void setLocationSpecificUtilityInclTaxes(double locationSpecificUtilityInclTaxes) {
        this.locationSpecificUtilityInclTaxes = locationSpecificUtilityInclTaxes;
    }

    public double getQuantity(){ return quantity; }

    public void setQuantity(double newQuantity) {
        quantity = newQuantity;
    }

    public AbstractZone getMyTaz(){
            return myTaz;
        }

    public boolean equals(Object o) {
       AmountInZone other = (AmountInZone) o;
       if (other== null)
       {
         return false;
       }
       if (other.myTaz.equals(myTaz) && other.myProductionActivity.equals(myProductionActivity))
       { 
         return true;
       }
       return false;
     }

    public int hashCode() {return myProductionActivity.hashCode() ^ myTaz.hashCode();};

    public double getAllocationSizeTerm(){ return allocationSizeTerm; }

    public void setAllocationSizeTerm(double allocationSizeTerm){ this.allocationSizeTerm = allocationSizeTerm; }


    
    /**
     * Method updateLocationUtilityTerms.
     * @param w
     * @throws ChoiceModelOverflowException 
     */
    public void updateLocationUtilityTerms(Writer w) throws ChoiceModelOverflowException {
    	// default behaviour is to terminate the line
        try {
            w.write("\n");
        } catch (IOException e) {
            System.out.println("error in location utility terms");
            e.printStackTrace();
            throw new RuntimeException(e);
        }
    }

	public void setConstrained(boolean constrained) {
		this.constrained = constrained;
		// constant is ignored in allocation but used in update, so let's set it to 0.
		this.setLocationSpecificUtilityInclTaxes(0);
	}

	public boolean isConstrained() {
		return constrained;
	}

}
