package com.hbaspecto.pecas.sd.orm;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import com.hbaspecto.pecas.aa.technologyChoice.ConsumptionFunction;
import com.hbaspecto.pecas.sd.SpaceTypesI;

import simpleorm.sessionjdbc.SSessionJdbc;

/**Business rules class for table space_types_group.<br>
 * Will not be regenerated by SimpleORMGenerator, add any business rules to this class
 **/

public class SpaceTypesGroup extends SpaceTypesGroup_gen implements java.io.Serializable {
	private static HashMap<Integer, SpaceTypesGroup> spaceTypesGroupHash = new HashMap<Integer, SpaceTypesGroup>(); 
	private static HashMap<Integer, Double> constructionTargets = new HashMap<Integer, Double>();
	
	public static SpaceTypesGroup getSpaceTypeGroupByID(int spaceGroupID){
		SpaceTypesGroup theOne = spaceTypesGroupHash.get(spaceGroupID);
		if (theOne == null){
			SSessionJdbc session = SSessionJdbc.getThreadLocalSession();
			theOne = session.find(SpaceTypesGroup.meta, spaceGroupID);
			if (theOne != null)	spaceTypesGroupHash.put(spaceGroupID, theOne);
		}
		return theOne;
	}
	public static double getTargetConstructionQuantity(int spaceGroupID){
		/*
		 * The following query gets all the commodities in a group together with their total production (TPc).
		SELECT commodity, sum(internal_bought) as sum  from exchange_results
		WHERE LUZ in (SELECT luz_number from luzs)
		AND commodity in (SELECT cc_commodity_name FROM construction_commodities WHERE space_types_group_id = spaceGroupID) 
		GROUP BY commodity*/

		Double target;
		target = constructionTargets.get(spaceGroupID);
		
		if (target != null){
			return target.doubleValue();
		} else {	
			target = 0.0;
			
			SSessionJdbc session = SSessionJdbc.getThreadLocalSession();
			Iterator<ConstructionCommodities> cc =  ConstructionCommodities.getConstCommodityBySpaceTypesGroup(session,spaceGroupID).iterator();

			while (cc.hasNext()){
				ConstructionCommodities cc_instance = cc.next();
				// TODO exchange_results table is hard coded, shouldn't we use sd_rents?
				double tp = ((Double) session.rawQuerySingle(" SELECT sum(internal_bought) as sum  from exchange_results " +
						" WHERE LUZ in (SELECT luz_number from luzs) AND commodity = ? ", false, new String(cc_instance.get_CcCommodityName()) )).doubleValue(); 
				target += tp * cc_instance.get_ConvertingFactor();	
			}
			constructionTargets.put(spaceGroupID, target);
			return target;
		}
	}
	public static double getObtainedConstructionQuantity(int spaceTypeGroupId) {
		
		List<SpaceTypesI> spaceTypes = SpaceTypesI.getSpaceTypesBySpaceTypeGroup(spaceTypeGroupId);
		double obtainedQnty=0; 
		
		Iterator<SpaceTypesI> itr = spaceTypes.iterator();
		SpaceTypesI sp;
		while(itr.hasNext()){
			sp = itr.next();
			obtainedQnty += sp.cumulativeAmountOfDevelopment * sp.get_ConvertingFactorForSpaceTypeGroup();
		}
		return obtainedQnty;
	}
}
