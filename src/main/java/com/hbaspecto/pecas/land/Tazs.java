package com.hbaspecto.pecas.land;

import java.util.ArrayList;
import java.util.List;

import com.hbaspecto.pecas.sd.orm.Tazs_gen;

import simpleorm.dataset.SQuery;
import simpleorm.sessionjdbc.SSessionJdbc;

/**Business rules class for table tazs.<br>
* Will not be regenerated by SimpleORMGenerator, add any business rules to this class
**/

public class Tazs extends Tazs_gen implements java.io.Serializable {
	private static boolean isCachedAlready=false;
	
	public static ArrayList<Integer> getZoneNumbers(SSessionJdbc session){	
		//SSessionJdbc session = SSessionJdbc.getThreadLocalSession();
		List<Tazs> tazs = getAllTazRecords(session);
		
		ArrayList<Integer> zoneNumbersInt = new ArrayList<Integer>();		
        
		for (int i = 0; i< tazs.size(); i++) {
            zoneNumbersInt.add(tazs.get(i).get_TazNumber());
        }
        return zoneNumbersInt;	
	}

	/**
	 * @param session
	 * @return
	 */
	private static List<Tazs> getAllTazRecords(SSessionJdbc session) {
		
		SQuery<Tazs> qry = new SQuery<Tazs>(Tazs_gen.meta);
		boolean wasBegun=true;
		if (!session.hasBegun()) {
			session.begin();
			wasBegun=false;
		}
		List<Tazs> tazs = session.query(qry);
		isCachedAlready = true;
		if (!wasBegun) session.commit();
		return tazs;			
	}
	
	private static Tazs getTazRecord(SSessionJdbc session, int tazNumber){
		
		if (!isCachedAlready) 
			getAllTazRecords(session);	
		
		Tazs oneTaz = session.getDataSet().find(meta, tazNumber);
		return oneTaz;		
	}
	
	public static Tazs getTazRecord(int tazNumber) {
		return getTazRecord(SSessionJdbc.getThreadLocalSession(), tazNumber);
	}
	 

}
